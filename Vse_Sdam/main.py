from aiogram import F, Dispatcher, Bot, types
from aiogram.filters import Command, CommandStart

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.filters import StateFilter 
from aiogram.types import Message,ReplyKeyboardRemove

import keyboards
import asyncio

bot = Bot('8025931005:AAEZGaU1OiM_DICkUoJ3zFx6HThWH7GtHDM')
dp = Dispatcher()

lessons = ['–ê–ª–≥–µ–±—Ä–∞', '–ì–µ–æ–º–µ—Ç—Ä–∏—è', '–ë–∏–æ–ª–æ–≥–∏—è', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–§–∏–∑–∏–∫–∞', '–ò—Å—Ç–æ—Ä–∏—è']

class Form(StatesGroup):
    choose_class = State()
    choose_work_type = State()
    choose_lesson = State()
    choose_variant = State()

#---------------------------------------------------------------------------------------------------#

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        text=f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}, —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:\n\n'
        '[üîçüëÄ –ù–∞—Ö–æ–¥–∏—Ç—å –ø–æ—á—Ç–∏ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.]\n\n'
        '[üìÜüí® –û—Ç–≤–µ—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–≥ –∫–∞–Ω–∞–ª–∞–º –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º.]\n\n'
        '[üíéüí∞ –ü–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—á—Ç–∏ –æ—Ç—Å—É—Ç–≤—É–µ—Ç,–∫–∞–∫ –Ω–∏ –∫–∞–∫ —ç—Ç—É –æ—Ç–≤–µ—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–∞–º–∏ –µ—Å–ª–∏ –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç–µ—Å—å üòô.]\n\n'
        '[üóÑüóÇ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ –≤—ã–ª–æ–∂–µ–Ω –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: ... ]\n\n'
        '–ù–∞–ø–∏—à–∏—Ç–µ /otveti –∏ –º—ã –ø—Ä–∏—Å—Ç—É–ø–∏–º.\n\n'
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ /cancel –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–æ—Ç–º–µ–Ω–∞".\n\n' 
    )

@dp.message(Command('otveti'))
async def start_cmd(message: Message, state: FSMContext):
    await state.set_state(Form.choose_class)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:', reply_markup=keyboards.kb_classes)

@dp.message(Form.choose_class, F.text.in_(['7', '8']))
async def process_7_8_class(message: Message, state: FSMContext):
    await state.update_data(chosen_class=message.text)
    await state.set_state(Form.choose_work_type)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:', reply_markup=keyboards.kb_works_vpr_only)

@dp.message(Form.choose_class, F.text.in_(['9']))
async def process_9_class(message: Message, state: FSMContext):
    await state.update_data(chosen_class=message.text)
    await state.set_state(Form.choose_work_type)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:', reply_markup=keyboards.kb_works_oge_vpr)

@dp.message(Form.choose_class, F.text.in_(['10', '11']))
async def process_10_11_class(message: Message, state: FSMContext):
    await state.update_data(chosen_class=message.text)
    await state.set_state(Form.choose_work_type)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:', reply_markup=keyboards.kb_works_ege_vpr)

@dp.message(Form.choose_work_type, F.text.in_(['–í–ü–†', '–û–ì–≠', '–ï–ì–≠']))
async def process_work_type(message: Message, state: FSMContext):
    await state.update_data(work_type=message.text)
    await state.set_state(Form.choose_lesson)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:', reply_markup=keyboards.kb_lessons)

@dp.message(Form.choose_lesson, F.text.in_(lessons))
async def process_lesson(message: Message, state: FSMContext):
    await state.update_data(chosen_lesson=message.text)
    await state.set_state(Form.choose_variant)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–¥–∞–Ω–∏–π:', reply_markup=keyboards.kb_var)

@dp.message(Form.choose_variant, F.text.in_(['1 –≤–∞—Ä–∏–∞–Ω—Ç', '2 –≤–∞—Ä–∏–∞–Ω—Ç']))
async def process_variant(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
        f"–ö–ª–∞—Å—Å: {data.get('chosen_class', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {data.get('work_type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {data.get('chosen_lesson', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç: {message.text}\n\n"
        f"–û—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –∑–¥–µ—Å—å...",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()

@dp.message(StateFilter(None),Command(commands=['cancel']))
@dp.message(default_state,F.text.lower() == '–æ—Ç–º–µ–Ω–∞')
async def cancel_nostate(message:Message,state:FSMContext):
    await state.set_data({})
    await message.answer(text='–ü–æ–∫–∞ –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏',reply_markup=ReplyKeyboardRemove())

@dp.message(Command(commands=['cancel']))
@dp.message(F.text.lower() == '–æ—Ç–º–µ–Ω–∞')
async def cancel(message:Message,state:FSMContext):
    await state.clear()
    await message.answer(text='–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',reply_markup=ReplyKeyboardRemove())

@dp.message(Command('üé≤'))
async def dice(message:Message):
    await message.answer('üé≤')

#------------------------------------------------------------------------------------#

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())